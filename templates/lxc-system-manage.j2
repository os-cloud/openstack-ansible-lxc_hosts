#!/usr/bin/env bash
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script was built for the express purpose of managing LXC on a
# host. The functions within this script provide for common operations
# that may be required when working with LXC in production.

# {{ ansible_managed }}

export LXC_BRIDGE="{{ lxc_net_bridge }}"
export VARRUN="/run/lxc"

function warn {
    echo -e "\e[0;35m${@}\e[0m"
}

function info {
    echo -e "\e[0;33m${@}\e[0m"
}

function success {
    echo -e "\e[0;32m${@}\e[0m"
}

function cleanup {
    # Clean up everything
    # Set the lxc bridge interface down
    ip link set "${LXC_BRIDGE}" down || true

    # Remove the lxc bridge interface
    brctl delbr "${LXC_BRIDGE}" || true
}

function pre_up {
    # Create the run directory if needed.
    if [[ ! -d "${VARRUN}" ]];then
        mkdir -p "${VARRUN}"
    fi

    # Source the lxc defaults
    if [[ -f "{{ system_config_dir }}/lxc" ]]; then
      source "{{ system_config_dir }}/lxc"
    fi
}


function start_containers_nicely {
    set -e
    # Start all containers on a host
    success "Starting all containers."
    for container in $(lxc-ls); do
      lxc-start -d -n "${container}"
    done
}

function stop_containers_nicely {
    # Stop all containers on a host
    warn "Stopping all containers."
    for container in $(lxc-ls); do
      lxc-stop -n "${container}"
    done
}

function stop_containers_with_fire {
    # Stop all containers on a host
    warn "Stopping all containers with fire."
    for container in $(lxc-ls); do
      lxc-stop -k -n "${container}"
    done
}

function start_networks {
    set -e
    systemctl restart systemd-networkd
}


function stop_networks {
    warn "Destroying the LXC container network."
    cleanup
}

function remove_down_veth {
    info "Getting a list of all DOWN veth interfaces"
    VETHPAIRS="$(ip link list | grep veth | grep "state DOWN" | awk '/veth/ {print $2}' | sed 's/\://g')"
    if [[ "$VETHPAIRS" ]];then
        warn "Removing all DOWN veth interfaces"
        for veth in $VETHPAIRS; do
          ip link delete dev "${veth}"
        done
    else
        success "No DOWN veth interfaces to remove"
    fi
}

function flush_cache {
    warn "Flushing network cache"
    ip -s -s neigh flush all
}

# Run through the base app setup
pre_up

# Check function
case "$1" in
    containers-start)
        start_containers_nicely
    ;;
    containers-stop)
        stop_containers_nicely
    ;;
    containers-force-stop)
        stop_containers_with_fire
    ;;
    containers-restart)
        stop_containers_nicely
        start_containers_nicely
    ;;
    containers-force-restart)
        stop_containers_with_fire
        start_containers_nicely
    ;;
    system-tear-down)
        stop_containers_nicely
        remove_down_veth
        stop_networks
        flush_cache
    ;;
    system-force-tear-down)
        stop_containers_with_fire
        remove_down_veth
        stop_networks
        flush_cache
    ;;
    system-start-up)
        start_networks
        start_containers_nicely
    ;;
    system-rebuild)
        stop_containers_nicely
        remove_down_veth
        stop_networks
        flush_cache
        start_networks
        start_containers_nicely
    ;;
    system-force-rebuild)
        stop_containers_with_fire
        remove_down_veth
        stop_networks
        flush_cache
        start_networks
        start_containers_nicely
    ;;
    veth-cleanup)
        remove_down_veth
    ;;
    flush-net-cache)
        flush_cache
    ;;
    *)
        info 'Management of internal LXC systems and processes:'
        echo '
        containers-start          Start all containers.
        containers-stop           Stop all containers.
        containers-restart        Stop all containers and then Start them.
        containers-force-stop     Force Stop all containers.
        containers-force-restart  Force Stop all containers and then Start them.
        system-start-up           Start up everything that LXC needs to
                                  operate, including the containers, and
                                  LXC bridge.
        system-tear-down          Tear down everything LXC on this system.
                                  This will remove the LXC bridge, stop all
                                  containers, remove DOWN veth interfaces,
                                  and flush the net cache.
        system-force-tear-down    Force tear down everything LXC on this system.
                                  This will remove the LXC bridge, stop all
                                  containers, remove DOWN veth interfaces,
                                  and flush the net cache.
        system-rebuild            Rebuild the LXC network,
                                  remove DOWN veth interfaces, flush the
                                  net cache, and restart all containers.
        system-force-rebuild      Force rebuild the LXC network,
                                  remove DOWN veth interfaces, flush the
                                  net cache, and restart all containers.
        veth-cleanup              Remove all DOWN veth interfaces from a system.
        flush-net-cache           Flush the host network cache. This is useful if
                                  IP addresses are being recycled on to containers
                                  from other hosts.
        '
    ;;
esac
